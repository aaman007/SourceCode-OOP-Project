/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codehub1.pkg0;

/**
 *
 * @author Aaman
 */
public class DynamicProgramming extends javax.swing.JFrame {

    /**
     * Creates new form DynamicProgramming
     */
    public DynamicProgramming() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        knapSack = new javax.swing.JButton();
        coinChange = new javax.swing.JButton();
        lis = new javax.swing.JButton();
        lcs = new javax.swing.JButton();
        EditDistance = new javax.swing.JButton();
        nCr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setBackground(new java.awt.Color(0, 0, 0));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setRows(5);
        output.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(output);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dynamic Programming");

        knapSack.setBackground(new java.awt.Color(0, 51, 153));
        knapSack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        knapSack.setForeground(new java.awt.Color(255, 255, 255));
        knapSack.setText("0-1 KnapSack");
        knapSack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knapSackActionPerformed(evt);
            }
        });

        coinChange.setBackground(new java.awt.Color(0, 51, 153));
        coinChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        coinChange.setForeground(new java.awt.Color(255, 255, 255));
        coinChange.setText("Coin Change");
        coinChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coinChangeActionPerformed(evt);
            }
        });

        lis.setBackground(new java.awt.Color(0, 51, 153));
        lis.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lis.setForeground(new java.awt.Color(255, 255, 255));
        lis.setText("LIS");
        lis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lisActionPerformed(evt);
            }
        });

        lcs.setBackground(new java.awt.Color(0, 51, 153));
        lcs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lcs.setForeground(new java.awt.Color(255, 255, 255));
        lcs.setText("LCS");
        lcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lcsActionPerformed(evt);
            }
        });

        EditDistance.setBackground(new java.awt.Color(0, 51, 153));
        EditDistance.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        EditDistance.setForeground(new java.awt.Color(255, 255, 255));
        EditDistance.setText("Edit Distance");
        EditDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDistanceActionPerformed(evt);
            }
        });

        nCr.setBackground(new java.awt.Color(0, 51, 153));
        nCr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nCr.setForeground(new java.awt.Color(255, 255, 255));
        nCr.setText("Binomial Coeffiicient");
        nCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(knapSack, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nCr, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lcs, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lis, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coinChange, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(knapSack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nCr, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EditDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lcs, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lis, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(coinChange, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new FrontPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lisActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"const int MAX = 1005;\n" +
"int dp[MAX],dr[MAX],N,a[MAX];\n" +
"int LIS(int u)\n" +
"{\n" +
"    if(dp[u]!=-1)\n" +
"        return dp[u];\n" +
"    int maxi = 0;\n" +
"    for(int i=u+1; i<N; i++)\n" +
"    {\n" +
"        if(a[u]<a[i] && LIS(i)>maxi)\n" +
"        {\n" +
"            maxi = LIS(i);\n" +
"            dr[u] = i;\n" +
"        }\n" +
"    }\n" +
"    return dp[u] = 1+maxi;\n" +
"}\n" +
"void printLIS(int start)\n" +
"{\n" +
"    while(dr[start]!=-1)\n" +
"    {\n" +
"        cout << \"Index : \" << start+1 << \"\\t\";\n" +
"        cout << \"Value : \" << a[start] << endl;\n" +
"        start = dr[start];\n" +
"    }\n" +
"    cout << \"Index : \" << start+1 << \"\\t\";\n" +
"    cout << \"Value : \" << a[start] << endl;\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    cin >> N;\n" +
" \n" +
"    for(int i=0; i<N; i++)\n" +
"        cin >> a[i];\n" +
" \n" +
"    memset(dp,-1,sizeof(dp));\n" +
"    memset(dr,-1,sizeof(dr));\n" +
" \n" +
"    int maxLIS = 0, start = -1;\n" +
" \n" +
"    for(int i=0; i<N; i++)\n" +
"    {\n" +
"        cout << \"Longest path from \" << i+1 << \" is : \" << LIS(i) << endl;\n" +
"        if(LIS(i)>maxLIS)\n" +
"        {\n" +
"            maxLIS = LIS(i);\n" +
"            start = i;\n" +
"        }\n" +
"    }\n" +
" \n" +
"    cout << \"Size : \" << maxLIS << \" \" << endl;\n" +
"    cout << \"Starting Index : \" << start+1 << \" \" << endl;\n" +
" \n" +
"    cout << \"LIS ->\\n\";\n" +
"    printLIS(start);\n" +
"}");
    }//GEN-LAST:event_lisActionPerformed

    private void lcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lcsActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"int dp[1005][1005];\n" +
"string s,s1,ans;\n" +
"int LCS(int i,int j)\n" +
"{\n" +
"    if(s[i]=='\\0' || s1[j]=='\\0')\n" +
"        return 0;\n" +
"    else if(dp[i][j] != -1)\n" +
"        return dp[i][j];\n" +
"    int len1=0,len2=0,mx=0;\n" +
"    if(s[i]==s1[j])\n" +
"        len1 = 1 + LCS(i+1,j+1);\n" +
"    else\n" +
"    {\n" +
"        len1 = LCS(i+1,j);\n" +
"        len2 = LCS(i,j+1);\n" +
"    }\n" +
"    return  dp[i][j] = max(len1,len2);\n" +
"}\n" +
"void findLCS(int i,int j)\n" +
"{\n" +
"    if(s[i]=='\\0' || s1[j]=='\\0')\n" +
"    {\n" +
"        cout << ans << endl;\n" +
"        return;\n" +
"    }\n" +
"    if(s[i]==s1[j])\n" +
"    {\n" +
"        ans += s[i];\n" +
"        findLCS(i+1,j+1);\n" +
"    }\n" +
"    else\n" +
"    {\n" +
"        if(dp[i+1][j]>dp[i][j+1])\n" +
"            findLCS(i+1,j);\n" +
"        else\n" +
"            findLCS(i,j+1);\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    memset(dp,-1,sizeof(dp));\n" +
"    cin >> s >> s1;\n" +
"    cout << LCS(0,0) << endl;\n" +
"    ans = \"\";\n" +
"    findLCS(0,0);\n" +
"}");
    }//GEN-LAST:event_lcsActionPerformed

    private void knapSackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knapSackActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"int dp[1005][1005],wieght[1005],cost[1005] , CAP , N;\n" +
"int knapsack(int i,int w)\n" +
"{\n" +
"    if(i==N)\n" +
"        return 0;\n" +
"    if(dp[i][w]!=-1)\n" +
"        return dp[i][w];\n" +
"    int profit1=0,profit2=0;\n" +
"    if(w+wieght[i]<=CAP)\n" +
"        profit1 = cost[i]+knapsack(i+1,w+wieght[i]);\n" +
"    profit2 = knapsack(i+1,w);\n" +
"    return dp[i][w] = max(profit1,profit2);\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    int t;\n" +
"    cin >> t;\n" +
"    while(t--)\n" +
"    {\n" +
"        memset(dp,-1,sizeof(dp));\n" +
"        cin >> N >> CAP;\n" +
"        for(int i=0;i<N;i++)\n" +
"            cin >> wieght[i] >> cost[i];\n" +
"        cout << knapsack(0,0) << endl;\n" +
"    }\n" +
"}");
        
    }//GEN-LAST:event_knapSackActionPerformed

    private void nCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCrActionPerformed
        // TODO add your handling code here:
        output.setText("#include <bits/stdc++.h>\n" +
"using namespace std;\n" +
"int dp[700][700];\n" +
"int nCr(int n,int r)\n" +
"{\n" +
"    if(r==n)\n" +
"        return 1;\n" +
"    else if(r==1)\n" +
"        return n;\n" +
"    if(dp[n][r] != -1)\n" +
"        return dp[n][r];\n" +
"    else\n" +
"        return dp[n][r] = nCr(n-1,r) + nCr(n-1,r-1);\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    int n,r;\n" +
"    memset(dp,-1,sizeof(dp));\n" +
"    cin >> n >> r;\n" +
"    cout << nCr(n,r) << endl;\n" +
"}");
    }//GEN-LAST:event_nCrActionPerformed

    private void EditDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDistanceActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"int dp[2005][2005];\n" +
"string s,s1,ans;\n" +
"int main()\n" +
"{\n" +
"    int t;\n" +
"    cin >> t;\n" +
"    while(t--)\n" +
"    {\n" +
"        memset(dp,0,sizeof(dp));\n" +
"        cin >> s >> s1;\n" +
"        int len1 = s.length() , len2 = s1.length();\n" +
"        for(int i=0;i<=len1;i++)\n" +
"            dp[i][0] = i;\n" +
"        for(int i=0;i<=len1;i++)\n" +
"            dp[0][i] = i;\n" +
"        for(int i=1;i<=len1;i++)\n" +
"        {\n" +
"            for(int j=1;j<=len2;j++)\n" +
"            {\n" +
"                if(s[i-1]==s1[j-1])\n" +
"                    dp[i][j] = dp[i-1][j-1];\n" +
"                else\n" +
"                    dp[i][j] = min(dp[i-1][j-1]+1,min(dp[i-1][j]+1,dp[i][j-1]+1));\n" +
"            }\n" +
"        }\n" +
"        cout << dp[len1][len2] << endl;\n" +
"    }\n" +
"}");
    }//GEN-LAST:event_EditDistanceActionPerformed

    private void coinChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coinChangeActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"int dp[10][105] , coin[105] , N;\n" +
"int coinChange(int i,int amount)\n" +
"{\n" +
"    if(i==N)\n" +
"    {\n" +
"        if(amount==0)\n" +
"            return 1;\n" +
"        else\n" +
"            return 0;\n" +
"    }\n" +
"    else if(dp[i][amount]!=-1)\n" +
"        return dp[i][amount];\n" +
"    int p1 = 0 , p2 = 0;\n" +
"    if(amount-coin[i]>=0)\n" +
"        p1 = coinChange(i,amount-coin[i]);\n" +
"    p2 = coinChange(i+1,amount);\n" +
" \n" +
"    return dp[i][amount] = p1|p2;\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    int Money;\n" +
"    cin >> N;\n" +
"    for(int i=0;i<N;i++)\n" +
"        cin >> coin[i];\n" +
"    memset(dp,-1,sizeof(dp));\n" +
"    while(cin >> Money)\n" +
"    {\n" +
"        cout << coinChange(0,Money) << endl;\n" +
"    }\n" +
"}");
    }//GEN-LAST:event_coinChangeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DynamicProgramming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DynamicProgramming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DynamicProgramming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DynamicProgramming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DynamicProgramming().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EditDistance;
    private javax.swing.JButton coinChange;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton knapSack;
    private javax.swing.JButton lcs;
    private javax.swing.JButton lis;
    private javax.swing.JButton nCr;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
