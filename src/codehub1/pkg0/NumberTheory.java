/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codehub1.pkg0;

/**
 *
 * @author Aaman
 */
public class NumberTheory extends javax.swing.JFrame {

    /**
     * Creates new form NumberTheory
     */
    public NumberTheory() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        gcd = new javax.swing.JButton();
        divisors = new javax.swing.JButton();
        euler = new javax.swing.JButton();
        primefact = new javax.swing.JButton();
        bigMod = new javax.swing.JButton();
        sieve = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setBackground(new java.awt.Color(0, 0, 0));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setRows(5);
        output.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(output);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Number Theory");

        gcd.setBackground(new java.awt.Color(51, 153, 0));
        gcd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gcd.setForeground(new java.awt.Color(255, 255, 255));
        gcd.setText("Euclidian Algo for GCD");
        gcd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gcdActionPerformed(evt);
            }
        });

        divisors.setBackground(new java.awt.Color(51, 153, 0));
        divisors.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        divisors.setForeground(new java.awt.Color(255, 255, 255));
        divisors.setText("Finding Divisors");
        divisors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisorsActionPerformed(evt);
            }
        });

        euler.setBackground(new java.awt.Color(51, 153, 0));
        euler.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        euler.setForeground(new java.awt.Color(255, 255, 255));
        euler.setText("Euler's Totient Function");
        euler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eulerActionPerformed(evt);
            }
        });

        primefact.setBackground(new java.awt.Color(51, 153, 0));
        primefact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        primefact.setForeground(new java.awt.Color(255, 255, 255));
        primefact.setText("Prime Factorization");
        primefact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primefactActionPerformed(evt);
            }
        });

        bigMod.setBackground(new java.awt.Color(51, 153, 0));
        bigMod.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bigMod.setForeground(new java.awt.Color(255, 255, 255));
        bigMod.setText("Big Mod");
        bigMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigModActionPerformed(evt);
            }
        });

        sieve.setBackground(new java.awt.Color(51, 153, 0));
        sieve.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sieve.setForeground(new java.awt.Color(255, 255, 255));
        sieve.setText("Sieve of Erasthosthenes");
        sieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sieveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(gcd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bigMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(euler, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                        .addComponent(divisors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(primefact, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sieve))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(gcd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bigMod, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(euler, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(divisors, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(primefact, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sieve, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new FrontPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void gcdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gcdActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"int main()\n" +
"{\n" +
"    long long int a,b,rem;\n" +
"    cin >> a >> b;\n" +
"    while(b>0)\n" +
"    {\n" +
"        rem = a%b;\n" +
"        a = b;\n" +
"        b = rem;\n" +
"    }\n" +
"    cout << a << endl;\n" +
"}");
    }//GEN-LAST:event_gcdActionPerformed

    private void bigModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bigModActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"#define ll long long\n" +
"using namespace std;\n" +
"int bigMod(int a,int b,int M)\n" +
"{\n" +
"    if(b==0)\n" +
"        return 1;\n" +
"    ll x = bigMod(a,b/2,M);\n" +
"    x = (x*x)%M;\n" +
"    if(b&1)\n" +
"        x = (x*a)%M;\n" +
"    return x;\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    ll b,p,m;\n" +
"    while(cin >> b >> p >> m)\n" +
"    {\n" +
"        cout << bigMod(b,p,m) << endl;\n" +
"    }\n" +
"}");
    }//GEN-LAST:event_bigModActionPerformed

    private void eulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eulerActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"const int MAX = 100005;\n" +
"int phi[MAX],mark[MAX];\n" +
"void totient()\n" +
"{\n" +
"    /// Initializing\n" +
"    for(int i=1;i<=MAX;i++)\n" +
"        phi[i] = i;\n" +
"    /// 1 is not prime\n" +
"    mark[1] = 1;\n" +
"    /// Finding all number's phi\n" +
"    for(int i=2;i<=MAX;i++)\n" +
"    {\n" +
"        if(!mark[i])           /// If i is prime\n" +
"        {\n" +
"            for(int j=i;j<=MAX;j+=i)\n" +
"            {\n" +
"                mark[j] = 1;    /// Marking j as not prime\n" +
"                phi[j] = phi[j]/i*(i-1);  /// Formula phi(p) = p/n * (n-1) where n is p's prime divisor\n" +
"            }\n" +
"        }\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    totient();\n" +
"    int x;\n" +
"    while(cin >> x)\n" +
"    {\n" +
"        cout << phi[x] << endl;\n" +
"    }\n" +
"}");
        
    }//GEN-LAST:event_eulerActionPerformed

    private void divisorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisorsActionPerformed
        // TODO add your handling code here:
        output.setText("Finding Divisors of a number\n" +
"Code for Finding Number of divisors and then printing them :\n\n#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"const int MAX = 100005;\n" +
"vector < int > divisors[MAX];\n" +
"void Divisors(int n)\n" +
"{\n" +
"    for(int i=1; i<=n; i++)\n" +
"    {\n" +
"        for(int j=i; j<=n; j+=i)\n" +
"        {\n" +
"            divisors[j].push_back(i);\n" +
"        }\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    Divisors(MAX);\n" +
"    int x;\n" +
"    while(cin >> x)\n" +
"    {\n" +
"        cout << \"Number of Divisors of X is : \" << divisors[x].size() << endl;\n" +
"        cout << \"The Divisors are :\\n\";\n" +
"        for(int i=0; i\n" +
"<divisors[x].size(); i++)\n" +
"            cout << divisors[x][i] << \" \";\n" +
"        cout << endl;\n" +
"    }\n" +
"}\n\nCode for Sum of Divisors ( SOD ) :\n\n#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"const int MAX = 1000005;\n" +
"long long sod[MAX];\n" +
"void SOD(int n)    ///SOD = Sum of Divisors\n" +
"{\n" +
"    for(int i=1; i<=n; i++)\n" +
"    {\n" +
"        for(int j=i; j<=n; j+=i)\n" +
"        {\n" +
"            sod[j] += i;\n" +
"        }\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    SOD(MAX);\n" +
"    int x;\n" +
"    while(cin >> x)\n" +
"    {\n" +
"        cout << \"Sum of Divisors of X is : \" << sod[x] << endl;\n" +
"    }\n" +
"}\n\nCode for Number of Divisors ( NOD ) :\n\n#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"const int MAX = 1000005;\n" +
"long long nod[MAX];\n" +
"void NOD(int n)    ///NOD = Number of Divisors\n" +
"{\n" +
"    for(int i=1; i<=n; i++)\n" +
"    {\n" +
"        for(int j=i; j<=n; j+=i)\n" +
"        {\n" +
"            nod[j]++;\n" +
"        }\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    NOD(MAX);\n" +
"    int x;\n" +
"    while(cin >> x)\n" +
"    {\n" +
"        cout << \"Number of Divisors of X is : \" << nod[x] << endl;\n" +
"    }\n" +
"}");
        
    }//GEN-LAST:event_divisorsActionPerformed

    private void primefactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primefactActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"vector < int > v;\n" +
"void primeFact(int n)\n" +
"{\n" +
"    while(n%2==0 && n>0)\n" +
"    {\n" +
"        v.push_back(2);\n" +
"        n /= 2;\n" +
"    }\n" +
"    for(int i=3;i<=sqrt(n);i+=2)\n" +
"    {\n" +
"        while(n%i==0 && n>0)\n" +
"        {\n" +
"            v.push_back(i);\n" +
"            n /= i;\n" +
"        }\n" +
"    }\n" +
"    if(n>2)\n" +
"        v.push_back(n);\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    int n;\n" +
"    while(cin >> n)\n" +
"    {\n" +
"        v.clear();\n" +
"        int k = n;\n" +
"        if(n == 0)\n" +
"            break;\n" +
"        if(n<0)\n" +
"            v.push_back(-1) , n *= -1;\n" +
"        primeFact(n);\n" +
"        cout << k << \" = \";\n" +
"        for(int i=0;i<v.size();i++)\n" +
"        {\n" +
"            cout << v[i];\n" +
"            if(i == v.size()-1)\n" +
"            {\n" +
"                cout << endl;\n" +
"                break;\n" +
"            }\n" +
"            cout << \" x \";\n" +
"        }\n" +
"    }\n" +
"}");
    }//GEN-LAST:event_primefactActionPerformed

    private void sieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sieveActionPerformed
        // TODO add your handling code here:
        output.setText("#include<bits/stdc++.h>\n" +
"using namespace std;\n" +
"bool prime[10000005];\n" +
"void sieve(int n)\n" +
"{\n" +
"    for(int i=2; i<=n; i++)\n" +
"        prime[i] = 1;\n" +
"    for(int i=2; i<=n; i++)\n" +
"    {\n" +
"        if(prime[i]==1)\n" +
"        {\n" +
"            for(int j=2; i*j<=n; j++)\n" +
"            {\n" +
"                prime[i*j] = 0;\n" +
"            }\n" +
"        }\n" +
"    }\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    sieve(10000005);\n" +
"    int t,n,cnt;\n" +
"    cin >> t;\n" +
"    while(t--)\n" +
"    {\n" +
"        cin >> n;\n" +
"        if(prime[n])\n" +
"            cout << \"Is Prime\\n\";\n" +
"        else\n" +
"            cout << \"Not Prime\\n\";\n" +
"    }\n" +
"    return 0;\n" +
"}");
    }//GEN-LAST:event_sieveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NumberTheory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NumberTheory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NumberTheory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NumberTheory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NumberTheory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bigMod;
    private javax.swing.JButton divisors;
    private javax.swing.JButton euler;
    private javax.swing.JButton gcd;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    private javax.swing.JButton primefact;
    private javax.swing.JButton sieve;
    // End of variables declaration//GEN-END:variables
}
