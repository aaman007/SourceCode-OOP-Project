/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codehub1.pkg0;

/**
 *
 * @author Aaman
 */
public class DataStructure extends javax.swing.JFrame {

    /**
     * Creates new form DataStructure
     */
    public DataStructure() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        segmentTree = new javax.swing.JButton();
        trie1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setBackground(new java.awt.Color(0, 0, 0));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setRows(5);
        output.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(output);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Data Structure");

        segmentTree.setBackground(new java.awt.Color(0, 102, 0));
        segmentTree.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        segmentTree.setForeground(new java.awt.Color(255, 255, 255));
        segmentTree.setText("Segment Tree");
        segmentTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                segmentTreeActionPerformed(evt);
            }
        });

        trie1.setBackground(new java.awt.Color(0, 102, 0));
        trie1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        trie1.setForeground(new java.awt.Color(255, 255, 255));
        trie1.setText("TRIE");
        trie1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trie1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(segmentTree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trie1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trie1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(segmentTree)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new FrontPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void segmentTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_segmentTreeActionPerformed
        // TODO add your handling code here:
        output.setText("Playing With BITs Problem [ Toph.co ]\n" +
"Problem Link : https://toph.co/p/playing-with-bits\n" +
"Code :\n\n#include<bits/stdc++.h>\n" +
"#define ll long long\n" +
"#define FastRead ios_base::sync_with_stdio(false);cin.tie(NULL);\n" +
"bool Check(ll n,ll pos) { return (n>>pos)&1; }\n" +
"const int MAX = 1e5+5;\n" +
"ll a[MAX];\n" +
"struct TREE\n" +
"{\n" +
"    int bit[65]={0};\n" +
"}tree[MAX*4];\n" +
"void build(int l,int r,int pos)\n" +
"{\n" +
"    if(l == r)\n" +
"    {\n" +
"        for(int i=0;i<=60;i++)\n" +
"        {\n" +
"            if(Check(a[l],i))\n" +
"                tree[pos].bit[i] = 1;\n" +
"        }\n" +
"        return;\n" +
"    }\n" +
"    int mid = (l+r)/2;\n" +
"    build(l,mid,pos*2);\n" +
"    build(mid+1,r,pos*2+1);\n" +
"    for(int i=0;i<=60;i++)\n" +
"        tree[pos].bit[i] = tree[2*pos].bit[i]+tree[2*pos+1].bit[i];\n" +
"    return;\n" +
"}\n" +
"void update(int l,int r,int pos,int idx,int x)\n" +
"{\n" +
"    if(idx < l || idx > r)\n" +
"        return;\n" +
"    if(l == r)\n" +
"    {\n" +
"        a[idx] = x;\n" +
"        for(int i=0;i<61;i++)\n" +
"        {\n" +
"            if(Check(a[l],i))\n" +
"                tree[pos].bit[i] = 1;\n" +
"            else\n" +
"                tree[pos].bit[i] = 0;\n" +
"        }\n" +
"        return;\n" +
" \n" +
"    }\n" +
"    int mid = (l+r)/2;\n" +
"    update(l,mid,2*pos,idx,x);\n" +
"    update(mid+1,r,2*pos+1,idx,x);\n" +
"    for(int i=0;i<=60;i++)\n" +
"        tree[pos].bit[i] = tree[2*pos].bit[i]+tree[2*pos+1].bit[i];\n" +
"    return;\n" +
"}\n" +
"ll query(int L,int R,int l,int r,int pos,int k)\n" +
"{\n" +
"    if(l>=L && r<=R)\n" +
"        return tree[pos].bit[k];\n" +
"    else if(l>R || r<L)\n" +
"        return 0;\n" +
"    int mid = (l+r)/2;\n" +
"    int q1 = query(L,R,l,mid,pos*2,k);\n" +
"    int q2 = query(L,R,mid+1,r,pos*2+1,k);\n" +
"    return q1+q2;\n" +
"}\n" +
"using namespace std;\n" +
"int main()\n" +
"{\n" +
"    int n;\n" +
"    cin >> n;\n" +
"    for(int i=1;i<=n;i++)\n" +
"        cin >> a[i];\n" +
"    build(1,n,1);\n" +
"    int q,type,i,x,l,r,k;\n" +
"    cin >> q;\n" +
"    while(q--)\n" +
"    {\n" +
"        cin >> type;\n" +
"        if(type == 1)\n" +
"        {\n" +
"            cin >> i >> x;\n" +
"            update(1,n,1,i,x);\n" +
"        }\n" +
"        else\n" +
"        {\n" +
"            cin >> l >> r >> k;\n" +
"            cout << query(l,r,1,n,1,k) << endl;\n" +
"        }\n" +
"    }\n" +
"}");
        
    }//GEN-LAST:event_segmentTreeActionPerformed

    private void trie1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trie1ActionPerformed
        // TODO add your handling code here:
        output.setText("Perfect Security [ Codeforces ]\nSolution :\n\n#include<bits/stdc++.h>\n" +
"#define ll long long\n" +
"#define FastRead ios_base::sync_with_stdio(false);cin.tie(NULL);\n" +
"using namespace std;\n" +
"bool Check(ll n,ll pos) { return (n & (1<<pos)); }\n" +
"bool Set(ll &n,ll pos) { return n = n | (1<<pos); }\n" +
"bool Clear(ll &n,ll pos) { return n = n & ~(1<<pos); }\n" +
"struct trieNode\n" +
"{\n" +
"    trieNode *one,*zero;\n" +
"    int cnt;\n" +
"    trieNode()\n" +
"    {\n" +
"        one = zero = NULL;\n" +
"        cnt = 0;\n" +
"    }\n" +
"};\n" +
"trieNode *root;\n" +
"void Insert(ll n)\n" +
"{\n" +
"    trieNode *cur = root;\n" +
"    for(int i=29;i>=0;i--)\n" +
"    {\n" +
"        if(Check(n,i))\n" +
"        {\n" +
"            if(cur->one == NULL)\n" +
"                cur->one = new trieNode();\n" +
"            cur = cur->one;\n" +
"        }\n" +
"        else\n" +
"        {\n" +
"            if(cur->zero == NULL)\n" +
"                cur->zero = new trieNode();\n" +
"            cur = cur->zero;\n" +
"        }\n" +
"        cur->cnt++;\n" +
"    }\n" +
"}\n" +
"ll MinimumXor(ll n)\n" +
"{\n" +
"    trieNode *cur = root;\n" +
"    for(int i=29;i>=0;i--)\n" +
"    {\n" +
"        if(Check(n,i))\n" +
"        {\n" +
"            if(cur->one && cur->one->cnt)\n" +
"            {\n" +
"                Clear(n,i);\n" +
"                cur = cur->one;\n" +
"            }\n" +
"            else\n" +
"                cur = cur->zero;\n" +
"        }\n" +
"        else\n" +
"        {\n" +
"            if(cur->zero && cur->zero->cnt)\n" +
"                cur = cur->zero;\n" +
"            else\n" +
"            {\n" +
"                Set(n,i);\n" +
"                cur = cur->one;\n" +
"            }\n" +
"        }\n" +
"        cur->cnt--;\n" +
"    }\n" +
"    return n;\n" +
"}\n" +
"int main()\n" +
"{\n" +
"    FastRead\n" +
"    root = new trieNode();\n" +
"    int n;\n" +
"    cin >> n;\n" +
"    ll a[n+2] , p;\n" +
"    for(int i=0;i<n;i++)\n" +
"        cin >> a[i];\n" +
"    for(int i=0;i<n;i++)\n" +
"    {\n" +
"        cin >> p;\n" +
"        Insert(p);\n" +
"    }\n" +
"    for(int i=0;i<n;i++)\n" +
"        cout << MinimumXor(a[i]) << \" \";\n" +
"    cout << endl;\n" +
"}");
  
    }//GEN-LAST:event_trie1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataStructure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataStructure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataStructure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataStructure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataStructure().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    private javax.swing.JButton segmentTree;
    private javax.swing.JButton trie1;
    // End of variables declaration//GEN-END:variables
}
